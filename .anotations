Clase 15
[Arquitectura de Software REST, Representational State Transfer]
Ciertas características que definen el comportamiento entre clientes y servidores.
Gira alrededor de recursos.
Definir url específicas que respondan a diferentes tipos de peticiones HTTP
URL construidas alrededor de un recurso que dan respuestas específicas según el método HTTP


REST
METODO HTTP         URL                     ACCION                          RESPUESTA                               VIEW                        CONMETS
-----------         ---                     ------                          ---------                               ----                        -------
GET                 /messages               MessagesController@index        Todos los mensajes                      messages.index              3. [OK], devuelve una lista de mensajes
GET                 /messages/create        MessagesController@create       Formulario de creación(create)          messages.create             1. [OK], devuelve un formulario
POST                /messages               MessagesController@store        Guarda mensajes y redirecciona(store)   messages.index              2. [OK]
GET                 /messages/{id}          MessagesController@show         Un mensaje específico                   messages.show               4. [OK]
GET                 /messages/{id}/edit     MessagesController@edit         Formulario de edición                   messages.edit               5. [OK]
PUT/PATCH           /messages/{id}          MessagesController@update       Actualiza mensaje y redirecciona        messages.update             6. [OK]
DELETE              /messages/{id}          MessagesController@destroy      Elimina mensaje y redirecciona


NOTA 1
En la arquitectura REST, lo que se devuelven son vistas.
En una API REST, lo retornado es JSON


CLASE 20.
Como se procesan los JS y CSS al estilo de laravel.
en el archivo package.json se definen las dependencias o módulos de node.js
javascript del lado del servidor

en la carpeta vendor se guardan las dependencias de composer.

node_modules y vendor son carpetas y no se deben de agregar al versionador por regla general.

en el archivo webpack.mix.js
es donde se ejecutarán todas las tareas de compilación y concatenación, minificación etc.
todo eso con la ayuda de webpack que es un organizador de tareas. pero nos enfocaremos en elixir que ahora es
laravel mix.

en la carpeta resources/sass [archivos sin compilar] => public/css [archivos css compilados]
para compilar usar el siguiente codigo
npm run dev <- suele ser muy tedioso estar ejecutando este comando ante cualquier cambio en el archivo scss.
para eso mejor es usar el siguiente comando
npm run wacth <- no funciona en homestead
usa el siguiente
npm run watch-poll <-

#<- Que pasa si quiero usar less en ves de usar sass :P
los archivos de less se guardan en una carpeta llamada less
en sass se pueden eliminar los punto y coma y las llaves

[COMANDOS]
una vez que hayamos terminado todo y estemos listos para enviar a producción ejecutar el siguiente comando
para optimizar los archivos
npm run production


#<- VIDEO 20
otras características de laravel-mix

¿Como concatenar multiples archivos en uno solo, y tambien como utilizar browser sync para

muy bien ya sabemos como combinar y procesar estilos.


CLASE 22
Sistema de control de acceso a usuario basado en roles.
Si quieres conservar datos, sebes de agregar una nueva migración


los metodos que se definen en el modelo
auth()->user() => App\User = Eloquent
Primero se hace una busqueda en el modelo de Eloquent
Segundo hace la busqueda en el query builder


#<- CLASE 23 [RELACIONES EN ELOQUENT]

php artisan make:model Role -m  #<- Lo crea con toda la migración
Relaccion de uno a uno y de uno a muchos

#<- CLASE 24 [RELACIONES MANY TO MANY]
Un usario pueda tener muchos usuarios

#<- Una tabla Pivot, o una tabla intermedia
php artisan make:migration users roles ---
utilizar los nombres de las tablas a relacionar, ordenarlas alfabeticamente y en singular y separar por un subguion
php artisan make:migration create_role_user_table

[COMANDO QUE USA EL TUTOR]
php artisan make:migration create_assigned_roles_table --create=assigned_roles

[TINKER] #<- Para inteactuar con la aplicación
php artisan tinker

#<- Comandos dentro de tinker
vagrant@homestead:~/code/ilaravel$ php artisan tinker
Psy Shell v0.9.9 (PHP 7.3.1-1+ubuntu18.04.1+deb.sury.org+1 — cli) by Justin Hileman
>>> $u = new App\User;\
... $u->name = "Administrador";\
... $u->email = "admin@email.com";\
... $u->password = bcrypt("123123");\
... $u->save();
=> true
>>> $u = new App\User;
$u->name = "Moderador";
$u->email = "mod@email.com";
$u->password = bcrypt("123123");
$u->save();
=> true
>>> $u = new App\User;
$u->name = "Estudiante";
$u->email = "estudiante@email.com";
$u->password = bcrypt("123123");
$u->save();
=> true
>>> $r = new App\Role;\
... $r->name = "Admin";\
... $r->display_name = "Administrador del sitio";\
... $r->description = "Este role tiene los permisos para administrar el sitio entero";\
... $r->save();
Illuminate/Database/QueryException with message 'SQLSTATE[42S22]: Column not found: 1054 Unknown column 'description' in 'field list' (SQL: insert into `roles` (`name`, `dis
play_name`, `description`, `updated_at`, `created_at`) values (Admin, Administrador del sitio, Este role tiene los permisos para administrar el sitio entero, 2019-02-22 05:0
8:49, 2019-02-22 05:08:49))'
>>> $r = new App\Role;
$r->name = "Admin";
$r->display_name = "Administrador del sitio";
$r->descripcion = "Este role tiene los permisos para administrar el sitio entero";
$r->save();
=> true
>>> $r = new App\Role;
$r->name = "mod";
$r->display_name = "Moderador de comentarios";
$r->descripcion = "Este role tiene los permisos para moderar comentarios";
$r->save();
=> true
>>> $r = new App\Role;
$r->name = "estudiante";
$r->display_name = "Estudiante";
$r->descripcion = "Este role tiene los permisos de estudiante";
$r->save();
=> true
>>> App\User::all()
=> Illuminate\Database\Eloquent\Collection {#2943
     all: [
       App\User {#2941
         id: 1,
         name: "Administrador",
         email: "admin@email.com",
         email_verified_at: null,
         created_at: "2019-02-22 05:04:40",
         updated_at: "2019-02-22 05:04:40",
       },
       App\User {#2919
         id: 2,
         name: "Moderador",
         email: "mod@email.com",
         email_verified_at: null,
         created_at: "2019-02-22 05:06:19",
         updated_at: "2019-02-22 05:06:19",
       },
       App\User {#2928
         id: 3,
         name: "Estudiante",
         email: "estudiante@email.com",
         email_verified_at: null,
         created_at: "2019-02-22 05:07:21",
         updated_at: "2019-02-22 05:07:21",
       },
     ],
   }
>>> App\User::find(1)
=> App\User {#2944
     id: 1,
     name: "Administrador",
     email: "admin@email.com",
     email_verified_at: null,
     created_at: "2019-02-22 05:04:40",
     updated_at: "2019-02-22 05:04:40",
   }
>>>
vagrant@homestead:~/code/ilaravel$


los middlewares te permiten pasan a un siguiente proceso.

#POLITICAS DE ACCESO
las politicas de acceso son simples calses de php que agrupan politicas de autorizacion basadas en los recursos
 [COMANDO] php artisan make:policy UserPolicy

 las politicas se tienen que registrar
aqui es donde se asigna una politica de acceso a un modelo
app/Providers/AuthServiceProvider.php

#################################<- INTERACCION CON TINKER Y COLLECTION

Microsoft Windows [Versión 10.0.17134.590]
(c) 2018 Microsoft Corporation. Todos los derechos reservados.

C:\Users\Usuario\code\ilaravel>cd ../..8
El sistema no puede encontrar la ruta especificada.

C:\Users\Usuario\code\ilaravel>cd ../..8
El sistema no puede encontrar la ruta especificada.

C:\Users\Usuario\code\ilaravel>cd ../../

C:\Users\Usuario>cd Homestead

C:\Users\Usuario\Homestead>ls
"ls" no se reconoce como un comando interno o externo,
programa o archivo por lotes ejecutable.

C:\Users\Usuario\Homestead>vagrant ssh
==> vagrant: A new version of Vagrant is available: 2.2.4 (installed version: 2.2.3)!
==> vagrant: To upgrade visit: https://www.vagrantup.com/downloads.html

Welcome to Ubuntu 18.04.1 LTS (GNU/Linux 4.15.0-43-generic x86_64)


 * Canonical Livepatch is available for installation.
   - Reduce system reboots and improve kernel security. Activate at:
vagrant@homestead:~$ php artisan tiken
Could not open input file: artisan
vagrant@homestead:~$ php artisan tinker
Could not open input file: artisan
vagrant@homestead:~$ tinker

Command 'tinker' not found, did you mean:

  command 'ticker' from deb ticker

Try: sudo apt install <deb name>

vagrant@homestead:~$ cd code
vagrant@homestead:~/code$ ls
ilaravel  irest
vagrant@homestead:~/code$ cd ilaravel
vagrant@homestead:~/code/ilaravel$ php artisan tinker
Psy Shell v0.9.9 (PHP 7.3.1-1+ubuntu18.04.1+deb.sury.org+1 — cli) by Justin HilemanPsy Shell v0.9.9 (PHP 7.3.1-1+ubuntu18.04.1+deb.sury.org+1 — cli) by Justin Hileman
>>> $users = []
=> []
>>> $users = [\]
PHP Parse error: Syntax error, unexpected ']', expecting T_STRING on line 1
>>> $users = [\
...
...
...
... clear
... user =
PHP Parse error: Syntax error, unexpected '=', expecting ',' or ')' or ']' on line 3
>>>
>>> $users = [
... ['name' => 'Igor', 'age' => 28],
... $users = [

user =
PHP Parse error: Syntax error, unexpected '=', expecting ',' or ')' or ']' on line 5
>>> $users = [
['name' => 'Igor', 'age' => 28],
['name' => 'Jhoe', 'age' => 26],
... ['name' => 'Wilson', 'age' => 26]];
=> [
     [
       "name" => "Igor",
       "age" => 28,
     ],
     [
       "name" => "Jhoe",
       "age" => 26,
     ],
     [
       "name" => "Wilson",
       "age" => 26,
     ],
   ]
>>> use Illuminate\Support\Collection;
>>> $a = new Collection($users);
=> Illuminate\Support\Collection {#2955
     all: [
       [
         "name" => "Igor",
         "age" => 28,
       ],
       [
         "name" => "Jhoe",
         "age" => 26,
       ],
       [
         "name" => "Wilson",
         "age" => 26,
       ],
     ],
   }
>>> #<- Segunda Forma
>>> $b = Collection::make($users);
=> Illuminate\Support\Collection {#2947
     all: [
       [
         "name" => "Igor",
         "age" => 28,
       ],
       [
         "name" => "Jhoe",
         "age" => 26,
       ],
       [
         "name" => "Wilson",
         "age" => 26,
       ],
     ],
   }
>>> #<- Tercera forma
>>> $c = collect($users);
=> Illuminate\Support\Collection {#2946
     all: [
       [
         "name" => "Igor",
         "age" => 28,
       ],
       [
         "name" => "Jhoe",
         "age" => 26,
       ],
       [
         "name" => "Wilson",
         "age" => 26,
       ],
     ],
   }
>>> $a
=> Illuminate\Support\Collection {#2955
     all: [
       [
         "name" => "Igor",
         "age" => 28,
       ],
       [
         "name" => "Jhoe",
         "age" => 26,
       ],
       [
         "name" => "Wilson",
         "age" => 26,
       ],
     ],
   }
>>> $b
=> Illuminate\Support\Collection {#2947
     all: [
       [
         "name" => "Igor",
         "age" => 28,
       ],
       [
         "name" => "Jhoe",
         "age" => 26,
       ],
       [
         "name" => "Wilson",
         "age" => 26,
       ],
     ],
   }
>>> $c
=> Illuminate\Support\Collection {#2946
     all: [
       [
         "name" => "Igor",
         "age" => 28,
       ],
       [
         "name" => "Jhoe",
         "age" => 26,
       ],
       [
         "name" => "Wilson",
         "age" => 26,
       ],
     ],
   }
>>> #<- Obtener el primer elemento del array
>>> $users->first();
PHP Error:  Call to a member function first() on array in Psy Shell code on line 1
>>> $a->first();
=> [
     "name" => "Igor",
     "age" => 28,
   ]
>>> #<- El último elemento con el método last
>>> $a->last();
=> [
     "name" => "Wilson",
     "age" => 26,
   ]
>>> #<- Cuántos elementos existen en el array?
>>> $a->count
Exception with message 'Property [count] does not exist on this collection instance.'
>>> $a->count()
=> 3
>>> #<- Sumar las edades
>>> $a->sum('age');
=> 80
>>> $a->avg('age')
=> 26.666666666667
>>> #<- Sacar un elemento
>>> $a->slice(1);
=> Illuminate\Support\Collection {#2945
     all: [
       1 => [
         "name" => "Jhoe",
         "age" => 26,
       ],
       2 => [
         "name" => "Wilson",
         "age" => 26,
       ],
     ],
   }
>>> $a = $b;
=> Illuminate\Support\Collection {#2947
     all: [
       [
         "name" => "Igor",
         "age" => 28,
       ],
       [
         "name" => "Jhoe",
         "age" => 26,
       ],
       [
         "name" => "Wilson",
         "age" => 26,
       ],
     ],
   }
>>> $a->push(['name' => 'Chistofer', 'age' => 24);
PHP Parse error: Syntax error, unexpected ')', expecting ']' on line 1
>>> $a->push(['name' => 'Chistofer', 'age' => 24];
PHP Parse error: Syntax error, unexpected ';', expecting ')' on line 1
>>> $a->push(['name' => 'Chistofer', 'age' => 24]);
=> Illuminate\Support\Collection {#2947
     all: [
       [
         "name" => "Igor",
         "age" => 28,
       ],
       [
         "name" => "Jhoe",
         "age" => 26,
       ],
       [
         "name" => "Wilson",
         "age" => 26,
       ],
       [
         "name" => "Chistofer",
         "age" => 24,
       ],
     ],
   }
>>> #<- Para eliminar un elemento
>>> $a
=> Illuminate\Support\Collection {#2947
     all: [
       [
         "name" => "Igor",
         "age" => 28,
       ],
       [
         "name" => "Jhoe",
         "age" => 26,
       ],
       [
         "name" => "Wilson",
         "age" => 26,
       ],
       [
         "name" => "Chistofer",
         "age" => 24,
       ],
     ],
   }
>>> $b
=> Illuminate\Support\Collection {#2947
     all: [
       [
         "name" => "Igor",
         "age" => 28,
       ],
       [
         "name" => "Jhoe",
         "age" => 26,
       ],
       [
         "name" => "Wilson",
         "age" => 26,
       ],
       [
         "name" => "Chistofer",
         "age" => 24,
       ],
     ],
   }
>>> $a->splice(2, 1)
=> Illuminate\Support\Collection {#2945
     all: [
       [
         "name" => "Wilson",
         "age" => 26,
       ],
     ],
   }
>>> $a
=> Illuminate\Support\Collection {#2947
     all: [
       [
         "name" => "Igor",
         "age" => 28,
       ],
       [
         "name" => "Jhoe",
         "age" => 26,
       ],
       [
         "name" => "Chistofer",
         "age" => 24,
       ],
     ],
   }
>>> #<- pluck, devolver un array con la llave que se envia por parametro
>>> $a->pluck('name');
=> Illuminate\Support\Collection {#2945
     all: [
       "Igor",
       "Jhoe",
       "Chistofer",
     ],
   }
>>> $a->pluck('age');
=> Illuminate\Support\Collection {#2933
     all: [
       28,
       26,
       24,
     ],
   }
>>> $d = $a->pluck('name');
=> Illuminate\Support\Collection {#2956
     all: [
       "Igor",
       "Jhoe",
       "Chistofer",
     ],
   }
>>> $d->contains('Jhoe');
=> true
>>> $d->contains('Jhoes');
=> false
>>> #<- Lo anterior fue el uso de contains
>>> #<- [VENTAJA] ENCADEJAR METODOS
>>> $a->pluck('name')->contains('Jhoe');
=> true
>>> #<- INTERCEPT, compara dos arrays y devuelve las coincidencias, es como un INNER JOIN
>>> #<- El resultado es un array de elementos que contiene ambos array
>>> $a->puck('name')->intersect(['Igor', 'Chistofer']);
BadMethodCallException with message 'Method Illuminate/Support/Collection::puck does not exist.'
>>> $a->pluck('name')->intersect(['Igor', 'Chistofer']);
=> Illuminate\Support\Collection {#2958
     all: [
       0 => "Igor",
       2 => "Chistofer",
     ],
   }
>>> #<- Si no existe ningún elemento devuelve un array vacio
>>> $a->pluck('name')->intersect(['Igor', 'Chistofer'])->count();
=> 2
>>> (bool) $a->pluck('name')->intersect(['Igor', 'Chistofer'])->count();
=> true
>>> #<- Para ver un listado completo de los métodos de la clase colecction dirigase a...
>>> #<- Cualquier accion que se ejecute en ELOQUENT, este devuelve los datos en forma de Collection
>>> use App\User;
>>> User::all();
=> Illuminate\Database\Eloquent\Collection {#2958
     all: [
       App\User {#2951
         id: 1,
         name: "Igor",
         email: "admin@email.com",
         email_verified_at: null,
         created_at: "2019-02-22 05:04:40",
         updated_at: "2019-03-11 17:58:05",
       },
       App\User {#2945
         id: 2,
         name: "Wilson",





     ],
   }
>>> #<- Pero esa coleccion hereda los métodos de la clase Collection y tambien se implementaron algunos adicionales

CLASE 28
GUARDAR RELACIONES HASONE Y HASMANY

#<- Definir la relación de usuario mensaje.

COMANDO
php artisan make:migration alter_messages_table --table=messages

x
#<- Ocultar campos cuando el usuario está autenticado.


#<- REFORZAMIENTO DE RELACIONES

#<- 1
    [hasOne]
    User [Modelo]                                           Phone [Modelo]  [user_id]
    phone() { return $this->hasOne('Phone::class') }